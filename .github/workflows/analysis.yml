name: Code analysis
on: [push, pull_request]
env:
  CCACHE_COMPRESS: 1
  CCACHE_MAXSIZE:  '1G'
  CCACHE_DIR: '${{ github.workspace }}/.ccache'
  CI_CFG_VERSION: 'github-linux-0.1.0-dev'
  MAX_BUG_AMOUNT: 39

jobs:
  run_linters:
    name: Code compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install python3-setuptools
          sudo apt-get install -y --no-install-recommends python3-dev python3-pip pylint3 python3-pycodestyle
      - name: Sanity check
        run: make checkall

  clang_static_analyzer:
    name: Clang-tidy static analyzer
    runs-on: ubuntu-latest
#   needs: run_linters  # If make checkall has no issues anymore, we can activate that.
    steps:
      - uses: actions/checkout@v2

      - name: Cache (ccache)
        uses: actions/cache@v1.1.2
        id: cache-ccache
        with:
          path: '${{ github.workspace }}/.ccache'
          key: ${{ runner.os }}-clang-tidy-ccache

      - name: Setup apt repositories
        run: |
          sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main' -y

      - name: Update apt repositories
        run: sudo apt-get update -q

      - name: Install Dependencies
        run: |
          sudo apt-get install -y --no-install-recommends libc++-dev ccache flex make cmake cython3 libeigen3-dev libepoxy-dev libfontconfig1-dev libfreetype6-dev libharfbuzz-dev libogg-dev libopus-dev libopusfile-dev libpng-dev libsdl2-dev libsdl2-image-dev python3-dev python3-jinja2 python3-numpy python3-pil python3-pip python3-pygments qml-module-qtquick-controls qtdeclarative5-dev

      - name: Install C compiler
        run: |
            sudo apt-get install -y --no-install-recommends clang-tidy clang-10 clang-tools-10 clang-10-doc libclang-common-10-dev libclang-10-dev libclang1-10 clang-format-10 clangd-10
            export CXX=clang++
            export CC=clang

      - name: Install scan-build (Python version)
        run: |
          pip3 install scan-build beautifulsoup4 html5lib setuptools

      - name: Show environment settings
        shell: bash
        run: |
          set -x
          which clang-tidy
          uname -a
          uname -s
          uname -m
          env

      - name: Generate build files
        run: |
          set -x
          ./configure --compiler=clang --mode=debug --flags="-Werror" --ccache --download-nyan

      - name: Intercept during build
        run: |
          intercept-build make build -j$(nproc)

      - name: Analyze output
        run: |
          analyze-build -v -o report --html-title="openage (${GITHUB_SHA:0:8})"

      - uses: actions/upload-artifact@master
        with:
          name: report
          path: report

      - name: Summarize report
        run: |
          echo "Full report is included in build Artifacts"
          echo
          chmod u+x ./.github/workflows-support/count-bugs.py && ./.github/workflows-support/count-bugs.py ${{ env.MAX_BUG_AMOUNT }} report/*/index.html

  clang_tidy_fixes:
    name: Code-quality with fixes by clang-tidy, iwyu, cppcheck
    runs-on: ubuntu-latest
#   needs: run_linters  # If make checkall has no issues anymore, we can activate that.
    steps:
      - uses: actions/checkout@v2

      - name: Cache (ccache)
        uses: actions/cache@v1.1.2
        id: cache-ccache
        with:
          path: '${{ github.workspace }}/.ccache'
          key: ${{ runner.os }}-clang-tidy-ccache

      - name: Setup apt repositories
        run: |
          sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main' -y

      - name: Update apt repositories
        run: sudo apt-get update -q

      - name: Install Dependencies
        run: |
          sudo apt-get install -y --no-install-recommends libc++-dev ccache flex make cmake cython3 libeigen3-dev libepoxy-dev libfontconfig1-dev libfreetype6-dev libharfbuzz-dev libogg-dev libopus-dev libopusfile-dev libpng-dev libsdl2-dev libsdl2-image-dev python3-dev python3-jinja2 python3-numpy python3-pil python3-pip python3-pygments qml-module-qtquick-controls qtdeclarative5-dev

      - name: Install C compiler
        run: |
          sudo apt-get install -y --no-install-recommends clang-tidy clang-10 clang-tools-10 clang-10-doc libclang-common-10-dev libclang-10-dev libclang1-10 clang-format-10 clangd-10
          export CXX=clang++
          export CC=clang

      - name: Install Include-what-you-use
        run: |
          sudo apt-get install -y iwyu

      - name: Show environment settings
        shell: bash
        run: |
          set -x
          which clang-tidy
          uname -a
          uname -s
          uname -m
          env

      - name: Generate build files
        run: |
          set -x
          ./configure --compiler=clang --mode=debug --flags="-Werror" --ccache --download-nyan

      - name: Run Clang-tidy
        run: |
          chmod u+x ./buildsystem/scripts/clang-tidy/run-clang-tidy.py && ./buildsystem/scripts/clang-tidy/run-clang-tidy.py -clang-tidy-binary "/usr/bin/clang-tidy" -config ".clang-tidy" -j "$(nproc)" -style ".clang-format" -export-fixes "buildsystem/scripts/clang-tidy-fixes_${{ GITHUB.SHA }}.yaml"  -p "bin/compile_commands.json"

      - name: Upload clang-tidy fixes
        uses: actions/upload-artifact@master
        with:
          name: clang-tidy-fixes_${{ GITHUB.SHA }}
          path: buildsystem/scripts/clang-tidy-fixes_${{ GITHUB.SHA }}.yaml

      #         make -k CXX=/path/to/llvm/Debug+Asserts/bin/include-what-you-use 2> bin/iwyu.out
      - name: Include-what-you-use
        run: |
          chmod u+x ./buildsystem/scripts/iwyu_tool.py && ./buildsystem/scripts/iwyu/iwyu_tool.py -p ".bin"
          which include-what-you-use > buildsystem/scripts/iwyu/iwyu-fixes_${{ GITHUB.SHA }}

      - name: Upload Include-what-you-use fixes
        uses: actions/upload-artifact@master
        with:
          name: iwyu-fixes_${{ GITHUB.SHA }}
          path: buildsystem/scripts/iwyu/iwyu-fixes${{ GITHUB.SHA }}

# TODO: Clang-format file for fixes
#         as soon as we have a clang-format file, we can format the exported fixes directly in the way we need it with
#         adding -format -style
#         -config ".clang-tidy"
#         add checks beside the standard checks


  clang_format_fixes:
    name: Clang-format fixes
    runs-on: ubuntu-latest
#   needs: run_linters  # If make checkall has no issues anymore, we can activate that.
    steps:
      - uses: actions/checkout@v2

      - name: Setup apt repositories
        run: |
          sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main' -y

      - run:  sudo apt-get update -q

      - name: Install Clang format
        run: |
            sudo apt-get install -y clang-format-10

      - name: Show environment settings
        shell: bash
        run: |
          set -x
          uname -a
          uname -s
          uname -m
          env

      - name: Generate clang-format fixes
        run: |
          set -x
          git diff -U0 --no-color ${{ GITHUB.SHA }} | python buildsystem/scripts/clang-format/clang-format-diff.py -i -p1
          git format-patch -1 ${{ GITHUB.SHA }} > buildsystem/scripts/clang-format/clang-format-fixes_${{ GITHUB.SHA }}

      - name: Upload Clang-Format fixes
        uses: actions/upload-artifact@master
        with:
          name: clang-format-fixes_${{ GITHUB.SHA }}
          path: buildsystem/scripts/clang-format/clang-format-fixes_${{ GITHUB.SHA }}
